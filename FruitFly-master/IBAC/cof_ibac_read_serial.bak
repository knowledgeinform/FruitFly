/*****************************************************

     Cof EchoChr.c
     Z-World, 1999

     This program echos a block of characters over serial port B.
     It must be run with a serial utility such as Hyperterminal.

     Connect RS232 cable from PC to Rabbit:
     	 Connect PC's RS232 GND to Rabbit GND
       Connect PC's RS232 TD  to Rabbit RXB
       Connect PC's RS232 RD  to Rabbit TXB

     Configure the serial utility for port connected to RS232, 19200 8N1.

     Run this program.
     Run Hyperterminal.
     Type characters into the serial utility window.

     This program uses the single user cofunction form of the serial read
     and write routines, which allows it to cooperatively multi-task with
     other costates when it is not actively reading or writing data. It
     will echo characters sent from the serial utility back to the serial
     utility where they will appear in its send/receive window.

     This program does not have a destructive backspace (try it), nor
     does it "cook" a RETURN into a return-linefeed combination.  Those
     changes are left as an exercise to the reader.  :)

******************************************************/
#class auto


/*****************************************************
     The input and output buffers sizes are defined here. If these
     are not defined to be (2^n)-1, where n = 1...15, or they are
     not defined at all, they will default to 31 and a compiler
     warning will be displayed.
******************************************************/
#define MAX_TOKEN_SIZE 128
#define DINBUFSIZE  255
#define DOUTBUFSIZE 255
#define D_BAUDRATE 57600L


#define MSG_QUEUE_SIZE 32


/**
IBAC Message Types
$info
$fault
$s
$trace
$diagnostics
$baseline


*/
scofunc int cof_read_token(char * tokenBuffer,int bufferSize)
{

   int tokenIndex;
   int c;

   tokenIndex=0;
   c=-1;

   while(tokenIndex<bufferSize)
   {
   	waitfor((c=serDgetc())&&c!=-1);
	   tokenBuffer[tokenIndex]=c;
      if(c=='\n' && tokenIndex>0 &&tokenBuffer[tokenIndex-1]=='\r')
         return tokenIndex++;
      tokenIndex++;
   }
   printf("Exceeded buffer capacity:%s",tokenBuffer);
   return -1;
}

scofunc int cof_write_log(char * tokenBuffer)
{

	unsigned long	time;
   char logline[MAX_TOKEN_SIZE+20+1+1]; //Add 20 for unsigned long, and 1 ':' and 1  for newline
   memset(logline,0,sizeof(logline));
   time = read_rtc();
   sprintf(logline,"%020ul: %s \n",time,&tokenBuffer);
   printf("%s",logline);

}

void main()
{
	int c;

	char msgQueue[MSG_QUEUE_SIZE][MAX_TOKEN_SIZE];
   char currentMsgQueueIndex,currentLogQueueIndex;

   int i;
   int tokenSize;
   //clear screen
   printf ( " \x1Bt" );
	// This is necessary for initializing RS232 functionality of LP35XX boards.
#if _BOARD_TYPE_ == 0x1200 || _BOARD_TYPE_ == 0x1201
	brdInit();
#endif
   printf("Opening Serial Port\n");
	c = 0;
   currentMsgQueueIndex = currentLogQueueIndex = 0;

   //setup serial port
   serDopen(D_BAUDRATE);
   serDdatabits(PARAM_8BIT);
   serDparity(PARAM_NOPARITY);
   serDflowcontrolOff();
   while (1) {
   	loophead();

      //Serial Parsing costate
   	costate {
         memset(msgQueue[currentMsgQueueIndex],0,MAX_TOKEN_SIZE);
         wfd tokenSize = cof_read_token(msgQueue[currentMsgQueueIndex],MAX_TOKEN_SIZE-1);
         //printf("Received %d: %s\n",currentMsgQueueIndex, msgQueue[currentMsgQueueIndex]);
         //check if we lapped anyone
         if(tokenSize>0){
	         currentMsgQueueIndex = (currentMsgQueueIndex+1)%MSG_QUEUE_SIZE;
	         if(currentMsgQueueIndex==currentLogQueueIndex){
	            printf("Lapped Logger\n");
	            currentLogQueueIndex = (currentLogQueueIndex+1)%MSG_QUEUE_SIZE;
	         }
         }

      }

      //Logging Costate
      costate
      {
			waitfor(currentLogQueueIndex!=currentMsgQueueIndex);
         //Print out incoming string
         wfd cof_write_log( msgQueue[currentLogQueueIndex]);
         currentLogQueueIndex = (currentLogQueueIndex+1)%MSG_QUEUE_SIZE;
      }

      //Accept Incoming Connections Costate

		//Network Transmission Costate

      //Go no go light//GPIO Costate?

      //Server costate


   }
   serDclose();                  // disables B serial port reading and writing
}