/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConfigValueChanger.java
 *
 * Created on Aug 3, 2011, 12:54:39 PM
 */

package edu.jhuapl.nstd.swarm.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.util.ArrayList;

/**
 *
 * @author humphjc1
 */
public class ConfigValueChanger extends javax.swing.JFrame
{
    ArrayList<File> m_FileList = new ArrayList<File> ();
    boolean m_ChangeValues;

    FilenameFilter m_FileFilter = new FilenameFilter()
    {
        @Override
        public boolean accept(File dir, String name)
        {
            if (name.contains (".svn"))
                return false;
            if (name.endsWith(".java") || name.endsWith(".txt") || name.endsWith(".properties"))
                return true;
            if (new File(dir + "/" + name).isDirectory())
                return true;
            return false;
        }
    };

    /** Creates new form ConfigValueChanger */
    public ConfigValueChanger() {
        initComponents();
        jCheckBox1ActionPerformed(null);

        File configFolder = new File ("./config");
        File list[] = configFolder.listFiles (m_FileFilter);
        addFilesToFileList (list);

        File srcFolder = new File ("./src");
        list = srcFolder.listFiles (m_FileFilter);
        addFilesToFileList (list);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Current Token Name:");

        jLabel2.setText("New Token Name:");

        jButton1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jButton1.setText("Go!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1)
                        .addGap(34, 34, 34))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String oldConfig = jTextField1.getText();
        String newConfig = jTextField2.getText();

        if (oldConfig == null || oldConfig.length() < 3)
            return;
        if (m_ChangeValues && (newConfig == null || newConfig.length() < 3))
            return;

        for (int i = 0; i < m_FileList.size(); i ++)
        {
            changeConfigValue (m_FileList.get(i), oldConfig, newConfig);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        m_ChangeValues = jCheckBox1.isSelected();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConfigValueChanger().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void changeConfigValue(File file, String oldConfig, String newConfig)
    {
        try
        {
            //read lines of file
            BufferedReader reader = new BufferedReader(new FileReader(file));
            ArrayList<String> fileText = new ArrayList<String> ();

            String nextLine = null;
            while ((nextLine = reader.readLine()) != null)
            {
                fileText.add(nextLine);
            }

            reader.close();

            //find any text matches and convert
            boolean anythingChanged = false;
            for (int i = 0; i < fileText.size(); i ++)
            {
                String line = fileText.get(i);
                if (line.contains(oldConfig))
                {
                    if (m_ChangeValues)
                    {
                        line = line.replaceAll(oldConfig, newConfig);
                        anythingChanged = true;
                        System.out.println (file.getName() + " : " + (i+1) + " : Replaced \"" + oldConfig + "\" with \"" + newConfig + "\"");
                        fileText.set(i, line);
                    }
                    else
                    {
                        System.out.println (file.getName() + " : " + (i+1) + " : Found \"" + oldConfig + "\"");
                    }
                }
            }
            

            //write lines of file
            if (anythingChanged)
            {
                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                for (int i = 0; i < fileText.size(); i ++)
                {
                    writer.write(fileText.get(i));
                    writer.newLine();
                }
                writer.flush();
                writer.close();
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    private void addFilesToFileList(File[] list)
    {
        for (File file : list)
        {
            if (file.isDirectory())
            {
                addFilesToFileList(file.listFiles(m_FileFilter));
            }
            else
            {
                m_FileList.add(file);
            }
        }
    }

}
