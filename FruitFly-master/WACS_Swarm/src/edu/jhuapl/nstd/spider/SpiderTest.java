/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on Mar 26, 2009, 7:58:29 PM
 */
package edu.jhuapl.nstd.spider;

import edu.jhuapl.nstd.spider.messages.ChemicalDetectionResponse;
import edu.jhuapl.nstd.spider.messages.FavGpsPvtCommand;
import edu.jhuapl.nstd.spider.messages.MetRequest;
import edu.jhuapl.nstd.spider.messages.MetResponse;
import edu.jhuapl.nstd.spider.messages.OkPowerDownResponse;
import edu.jhuapl.nstd.spider.messages.SpiderGpsModeEnum;
import edu.jhuapl.nstd.spider.messages.SpiderMessage;
import edu.jhuapl.nstd.spider.messages.SpiderMessageType;
import edu.jhuapl.nstd.spider.messages.SpiderModeEnum;
import edu.jhuapl.nstd.spider.messages.SpiderStateCommand;
import edu.jhuapl.nstd.util.XCommSerialPort;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author southmk1
 */
public class SpiderTest extends javax.swing.JFrame implements SpiderMessageListener {

    /** Creates new form NewJFrame */
    private SpiderInterface spiderInterface;

    public SpiderTest() {
        initComponents();
        //setup table
        DefaultTableModel model = new DefaultTableModel();
        jtbChemDetection.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        jtbChemDetection.setModel(
                model);
        ArrayList<Method> methods = new ArrayList<Method>();
        for (Method m : ChemicalDetectionResponse.class.getMethods()) {
            methods.add(m);
        }

        Collections.sort(methods, new Comparator() {

            @Override
            public int compare(Object o1, Object o2) {
                return o1.toString().compareTo(o2.toString());
            }
        });
        for (Method m : methods) {
            if (isGetter(m)) {
                if (m.getName().startsWith("is")) {
                    model.addColumn(m.getName().substring(2));
                } else {
                    model.addColumn(m.getName().substring(3));
                }
            }
        }

        jtlMessages.setModel(new DefaultListModel());
        DefaultTableModel peakModel = new DefaultTableModel();
        peakModel.addColumn("Id");
        peakModel.addColumn("ims 1 pos");
        peakModel.addColumn("ims 1 neg");
        peakModel.addColumn("ims 2 pos");
        peakModel.addColumn("ims 2 neg");

        jtbPeaks.setModel(peakModel);

        pack();

        XCommSerialPort serialPort;
        try {
            serialPort = new XCommSerialPort("COM11", 57600);
            spiderInterface = new SpiderInterface(serialPort);
            spiderInterface.addChemDetectionListener(this);
            spiderInterface.addChemNonDetectionListener(this);
            spiderInterface.addPersistentListener(SpiderMessageType.SPIDER_CHEMICAL_DETECTION, this);
            spiderInterface.addPersistentListener(SpiderMessageType.SPIDER_OK_POWER_DOWN, this);
            spiderInterface.addPersistentListener(SpiderMessageType.SPIDER_MET_SENSOR_REPORT, this);
        } catch (Exception ex) {
            Logger.getLogger(SpiderTest.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgState = new javax.swing.ButtonGroup();
        jbtnSendGps = new javax.swing.JButton();
        jbtnSendState = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbChemDetection = new javax.swing.JTable();
        rbPower = new javax.swing.JRadioButton();
        rbPylon = new javax.swing.JRadioButton();
        rbStopSearch = new javax.swing.JRadioButton();
        rbSearch = new javax.swing.JRadioButton();
        rbStandby = new javax.swing.JRadioButton();
        jtxtLat = new javax.swing.JTextField();
        jtxtLon = new javax.swing.JTextField();
        jtxtAlt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        rbTx = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtlMessages = new javax.swing.JList();
        jbtnSendMet = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbPeaks = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbtnSendGps.setText("Send Gps");
        jbtnSendGps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSendGpsActionPerformed(evt);
            }
        });

        jbtnSendState.setText("Send State");
        jbtnSendState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSendStateActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtbChemDetection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtbChemDetection);

        bgState.add(rbPower);
        rbPower.setText("Power Down");

        bgState.add(rbPylon);
        rbPylon.setText("Pylon Mode");

        bgState.add(rbStopSearch);
        rbStopSearch.setText("Terminate Search");

        bgState.add(rbSearch);
        rbSearch.setText("Search");

        bgState.add(rbStandby);
        rbStandby.setText("Standby");

        jtxtLat.setText("0");

        jtxtLon.setText("0");

        jtxtAlt.setText("0");

        jLabel1.setText("lat");

        jLabel2.setText("lon");

        jLabel3.setText("alt");

        bgState.add(rbTx);
        rbTx.setText("Transmit Data");

        jtlMessages.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jtlMessages);

        jbtnSendMet.setText("Request Met");
        jbtnSendMet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSendMetActionPerformed(evt);
            }
        });

        jtbPeaks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtbPeaks);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1038, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbPower)
                            .addComponent(rbPylon)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(rbSearch)
                                    .addGap(50, 50, 50))
                                .addComponent(rbStandby, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(rbStopSearch)
                            .addComponent(rbTx)
                            .addComponent(jbtnSendState))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbtnSendGps)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jtxtAlt)
                                    .addComponent(jtxtLon)
                                    .addComponent(jtxtLat, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel1))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel2)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3))))
                            .addComponent(jbtnSendMet))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(rbPower)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rbPylon)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rbStandby)
                                    .addGap(3, 3, 3)
                                    .addComponent(rbSearch)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rbStopSearch)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rbTx)
                                    .addGap(28, 28, 28)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jbtnSendState)
                                        .addComponent(jbtnSendMet)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jtxtLat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jtxtLon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jtxtAlt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                    .addGap(3, 3, 3)
                                    .addComponent(jbtnSendGps))))
                        .addGap(46, 46, 46))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(466, 466, 466))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnSendGpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSendGpsActionPerformed

        double lat;
        double lon;
        int alt;

        try {
            lat = Double.parseDouble(jtxtLat.getText());
            lon = Double.parseDouble(jtxtLon.getText());
            alt = Integer.parseInt(jtxtAlt.getText());
        } catch (Exception e) {
            insertMessageArea("Error parsing gps data");
            return;
        }

        FavGpsPvtCommand gpsCommand = new FavGpsPvtCommand();
        gpsCommand.setGpsLat((int) (lat * 1000000));
        gpsCommand.setGpsLon((int) (lon * 1000000));
        gpsCommand.setGpsAlt(alt);

        gpsCommand.setGpsMode(SpiderGpsModeEnum.Nav2D);

        gpsCommand.setNumberSatellitesTracking(1);
        gpsCommand.setSpeedOverGround(1);
        gpsCommand.setTrackOverGround(1);
        Calendar utc = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        long currentTime = utc.getTimeInMillis();
        utc.set(Calendar.DAY_OF_WEEK, 1);
        utc.set(Calendar.HOUR_OF_DAY, 0);
        utc.set(Calendar.MINUTE, 0);
        utc.set(Calendar.SECOND, 0);
        utc.set(Calendar.MILLISECOND, 0);
        gpsCommand.setGpsTimeOfWeek(currentTime - utc.getTimeInMillis());

        spiderInterface.sendMessageToSpider(gpsCommand);

        insertMessageArea(String.format("Sent GpsCommand: %1$f,%2$f,%3$d\n", lat, lon, alt));
}//GEN-LAST:event_jbtnSendGpsActionPerformed

    private void jbtnSendStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSendStateActionPerformed
        SpiderStateCommand sm = null;
        if (rbPower.isSelected()) {
            sm = new SpiderStateCommand(SpiderModeEnum.PowerDown);
        }
        if (rbPylon.isSelected()) {
            sm = new SpiderStateCommand(SpiderModeEnum.PylonMode);
        }
        if (rbSearch.isSelected()) {
            sm = new SpiderStateCommand(SpiderModeEnum.Search);
        }
        if (rbStandby.isSelected()) {
            sm = new SpiderStateCommand(SpiderModeEnum.Standby);
        }
        if (rbStopSearch.isSelected()) {
            sm = new SpiderStateCommand(SpiderModeEnum.TerminateSearch);
        }
        if (rbTx.isSelected()) {
            sm = new SpiderStateCommand(SpiderModeEnum.DataTransmit);
        }
        if (sm == null) {
            insertMessageArea("No spider state selected\n");
            return;
        }
        spiderInterface.sendMessageToSpider(sm);
        insertMessageArea(String.format("Sent Spider State Command: %1$s\n", sm.getState()));
    }//GEN-LAST:event_jbtnSendStateActionPerformed

    private void jbtnSendMetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSendMetActionPerformed
        spiderInterface.sendMessageToSpider(new MetRequest());
}//GEN-LAST:event_jbtnSendMetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SpiderTest().setVisible(true);
            }
        });
    }

    public boolean isGetter(Method m) {
        if (!m.getName().startsWith("get") && !m.getName().startsWith("is")) {
            return false;
        }
        if (m.getParameterTypes().length != 0) {
            return false;
        }
        if (void.class.equals(m.getReturnType())) {
            return false;
        }
        return true;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtnSendGps;
    private javax.swing.JButton jbtnSendMet;
    private javax.swing.JButton jbtnSendState;
    private javax.swing.JTable jtbChemDetection;
    private javax.swing.JTable jtbPeaks;
    private javax.swing.JList jtlMessages;
    private javax.swing.JTextField jtxtAlt;
    private javax.swing.JTextField jtxtLat;
    private javax.swing.JTextField jtxtLon;
    private javax.swing.JRadioButton rbPower;
    private javax.swing.JRadioButton rbPylon;
    private javax.swing.JRadioButton rbSearch;
    private javax.swing.JRadioButton rbStandby;
    private javax.swing.JRadioButton rbStopSearch;
    private javax.swing.JRadioButton rbTx;
    // End of variables declaration//GEN-END:variables

    public void addMessage(SpiderMessage message) {
        if (message instanceof ChemicalDetectionResponse) {
            handleDetection((ChemicalDetectionResponse) message);
        } else if (message instanceof OkPowerDownResponse) {
            handlePowerDown((OkPowerDownResponse) message);
        } else if (message instanceof MetResponse) {
            handleMetData((MetResponse) message);
        }

    }

    public void handleMetData(MetResponse message) {
        insertMessageArea("Met Response Message Received\n");
    }

    public void handlePowerDown(OkPowerDownResponse message) {
        insertMessageArea("PowerDown Ok Message Received\n");
    }

    public void handleDetection(ChemicalDetectionResponse message) {
        ArrayList<Method> methods = new ArrayList<Method>();
        for (Method m : ChemicalDetectionResponse.class.getMethods()) {
            methods.add(m);
        }

        Collections.sort(methods, new Comparator() {

            @Override
            public int compare(Object o1, Object o2) {
                return o1.toString().compareTo(o2.toString());
            }
        });
        ArrayList data = new ArrayList();
        for (Method m : methods) {
            if (isGetter(m)) {
                try {
                    data.add(m.invoke(message));
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(SpiderTest.class.getName()).log(Level.SEVERE, null, ex);
                    data.add(null);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(SpiderTest.class.getName()).log(Level.SEVERE, null, ex);
                    data.add(null);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(SpiderTest.class.getName()).log(Level.SEVERE, null, ex);
                    data.add(null);
                }
            }
        }
        DefaultTableModel model = ((DefaultTableModel) jtbChemDetection.getModel());
        model.insertRow(0, data.toArray());
        model.setRowCount(25);

        //handle peak data
        DefaultTableModel peaksModel = ((DefaultTableModel) jtbPeaks.getModel());
        peaksModel.setRowCount(0);
        for (int i = 0; i < message.getIms1PositivePeaks().length; i++) {
            ArrayList peakData = new ArrayList();
            peakData.add(message.getIms1PositivePeaks()[i].getPeakIdentifier());
            peakData.add(message.getIms1PositivePeaks()[i].getAmplitude());
            peakData.add(message.getIms2NegativePeaks()[i].getAmplitude());
            peakData.add(message.getIms2PositivePeaks()[i].getAmplitude());
            peakData.add(message.getIms2NegativePeaks()[i].getAmplitude());
            peaksModel.insertRow(0, peakData.toArray());
        }

        insertMessageArea(String.format("Chem Detection Message Received: %1$tH:%1$tM:%1$tS\n", Calendar.getInstance()));
    }

    public void insertMessageArea(String message) {

        DefaultListModel model = ((DefaultListModel) jtlMessages.getModel());
        model.insertElementAt(message, 0);
        while (model.getSize() > 25) {
            model.removeElementAt(model.getSize() - 1);
        }

    }

    @Override
    public void handleMessage(SpiderMessage m) {
        //find calling method
        Throwable t = new Throwable();
        StackTraceElement[] elements = t.getStackTrace();
        final String callerMethodName = elements[1].getMethodName();
        final String callerClassName = elements[1].getClassName();
        Runnable insertMessage = new Runnable() {

            @Override
            public void run() {
                insertMessageArea(String.format("Received message from: %1$s", callerClassName));
            }
        };

        SwingUtilities.invokeLater(insertMessage);


        if (!callerClassName.contains("ChemicalDetectionListener")) {
            final SpiderMessage message = m;
            Runnable addMessageToTable = new Runnable() {

                @Override
                public void run() {
                    addMessage(message);
                }
            };
            SwingUtilities.invokeLater(addMessageToTable);
        }
    }
}
