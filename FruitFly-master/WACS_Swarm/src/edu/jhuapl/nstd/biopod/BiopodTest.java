/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on Mar 26, 2009, 7:58:29 PM
 */
package edu.jhuapl.nstd.biopod;

import edu.jhuapl.nstd.biopod.messages.BioPodMessage;
import edu.jhuapl.nstd.biopod.messages.DiagnosticsMessage;
import edu.jhuapl.nstd.biopod.messages.IbacAirSample;
import edu.jhuapl.nstd.biopod.messages.IbacAlarm;
import edu.jhuapl.nstd.biopod.messages.IbacAutoCollect;
import edu.jhuapl.nstd.biopod.messages.IbacClearAlarm;
import edu.jhuapl.nstd.biopod.messages.IbacCollect;
import edu.jhuapl.nstd.biopod.messages.IbacCommand;
import edu.jhuapl.nstd.biopod.messages.IbacDiagRate;
import edu.jhuapl.nstd.biopod.messages.PodSetRtc;
import edu.jhuapl.nstd.biopod.messages.IbacSleep;
import edu.jhuapl.nstd.biopod.messages.IbacStatus;
import edu.jhuapl.nstd.biopod.messages.IbacTraceRate;
import edu.jhuapl.nstd.biopod.messages.ParticleCountMessage;
import edu.jhuapl.nstd.biopod.messages.PodHeartbeat;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.spec.MGF1ParameterSpec;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author southmk1
 */
public class BiopodTest extends javax.swing.JFrame implements BioPodMessageListener {

    /** Creates new form NewJFrame */
    private BioPodInterface bioPodInterface;

    public BiopodTest() {
        initComponents();
        //setup tables
        DefaultTableModel particleModel = new DefaultTableModel();
        jtbParticleDetection.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        jtbParticleDetection.setModel(
                particleModel);
        ArrayList<Method> particleMethods = new ArrayList<Method>();
        for (Method m : ParticleCountMessage.class.getMethods()) {
            particleMethods.add(m);
        }

        Collections.sort(particleMethods, new Comparator() {

            @Override
            public int compare(Object o1, Object o2) {
                return o1.toString().compareTo(o2.toString());
            }
        });
        for (Method m : particleMethods) {
            if (isGetter(m)) {
                if (m.getName().startsWith("is")) {
                    particleModel.addColumn(m.getName().substring(2));
                } else {
                    particleModel.addColumn(m.getName().substring(3));
                }
            }
        }

        DefaultTableModel diagnosticsModel = new DefaultTableModel();
        jtbDiagnostics.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        jtbDiagnostics.setModel(
                diagnosticsModel);
        ArrayList<Method> diagnosticsMethods = new ArrayList<Method>();
        for (Method m : DiagnosticsMessage.class.getMethods()) {
            diagnosticsMethods.add(m);
        }

        Collections.sort(diagnosticsMethods, new Comparator() {

            @Override
            public int compare(Object o1, Object o2) {
                return o1.toString().compareTo(o2.toString());
            }
        });
        for (Method m : diagnosticsMethods) {
            if (isGetter(m)) {
                if (m.getName().startsWith("is")) {
                    diagnosticsModel.addColumn(m.getName().substring(2));
                } else {
                    diagnosticsModel.addColumn(m.getName().substring(3));
                }
            }
        }


        jtlMessages.setModel(new DefaultListModel());
        
        pack();
        try {
            //jch changed IP addresses
            bioPodInterface = new BioPodInterface(InetAddress.getByName("192.168.1.13"), 1313, InetAddress.getByName("192.168.1.113"), 1313);
        } catch (UnknownHostException ex) {
            Logger.getLogger(BiopodTest.class.getName()).log(Level.SEVERE, null, ex);
        }
        bioPodInterface.addPersistentListener(BioPodMessage.BIO_POD_DIAGNOSTICS_MSG, this);
        bioPodInterface.addPersistentListener(BioPodMessage.BIO_POD_PARTICLE_COUNT_MSG, this);
        bioPodInterface.addPersistentListener(BioPodMessage.HEARTBEAT, this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgState = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbParticleDetection = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtlMessages = new javax.swing.JList();
        jbClearAlarm = new javax.swing.JButton();
        jbStatus = new javax.swing.JButton();
        jbSleep = new javax.swing.JButton();
        jbAirSample = new javax.swing.JButton();
        jbSyncRtc = new javax.swing.JButton();
        jtfTraceRate = new javax.swing.JTextField();
        jtfDiagRate = new javax.swing.JTextField();
        jtfAutoCollect = new javax.swing.JTextField();
        jbTraceRate = new javax.swing.JButton();
        jbDiagRate = new javax.swing.JButton();
        jbAutoCollect = new javax.swing.JButton();
        jcbAutoCollect = new javax.swing.JCheckBox();
        jcbAlarm = new javax.swing.JCheckBox();
        jbAlarm = new javax.swing.JButton();
        jcbCollect = new javax.swing.JCheckBox();
        jbCollect = new javax.swing.JButton();
        jtfRaw = new javax.swing.JTextField();
        jbRaw = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbDiagnostics = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtbParticleDetection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtbParticleDetection);

        jtlMessages.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jtlMessages);

        jbClearAlarm.setText("Clear Alarm");
        jbClearAlarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbClearAlarmActionPerformed(evt);
            }
        });

        jbStatus.setText("Status");
        jbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStatusActionPerformed(evt);
            }
        });

        jbSleep.setText("Sleep");
        jbSleep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSleepActionPerformed(evt);
            }
        });

        jbAirSample.setText("Air Sample");
        jbAirSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAirSampleActionPerformed(evt);
            }
        });

        jbSyncRtc.setText("Sync RTC");
        jbSyncRtc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSyncRtcActionPerformed(evt);
            }
        });

        jtfTraceRate.setText("jTextField1");

        jtfDiagRate.setText("jTextField2");

        jtfAutoCollect.setText("jTextField3");

        jbTraceRate.setText("Set Trace Rate");
        jbTraceRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbTraceRateActionPerformed(evt);
            }
        });

        jbDiagRate.setText("Set Diag Rate");
        jbDiagRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDiagRateActionPerformed(evt);
            }
        });

        jbAutoCollect.setText("Auto Collect");
        jbAutoCollect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAutoCollectActionPerformed(evt);
            }
        });

        jbAlarm.setText("Alarm");
        jbAlarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlarmActionPerformed(evt);
            }
        });

        jbCollect.setText("Collect");
        jbCollect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCollectActionPerformed(evt);
            }
        });

        jtfRaw.setText("jTextField4");

        jbRaw.setText("Send Raw");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtbDiagnostics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtbDiagnostics);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1088, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1072, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jbClearAlarm)
                                    .addComponent(jbSleep)
                                    .addComponent(jbAirSample)
                                    .addComponent(jbStatus)
                                    .addComponent(jbSyncRtc))
                                .addGap(76, 76, 76)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jcbAutoCollect)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jtfTraceRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jtfDiagRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jtfAutoCollect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jbTraceRate)
                                            .addComponent(jbDiagRate)
                                            .addComponent(jbAutoCollect)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jcbAlarm)
                                        .addGap(71, 71, 71)
                                        .addComponent(jbAlarm))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jcbCollect)
                                        .addGap(71, 71, 71)
                                        .addComponent(jbCollect))
                                    .addComponent(jtfRaw, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbRaw)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jbClearAlarm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSleep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAirSample)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSyncRtc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbRaw))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfTraceRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbTraceRate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfDiagRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbDiagRate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfAutoCollect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbAutoCollect)
                            .addComponent(jcbAutoCollect))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbAlarm)
                            .addComponent(jbAlarm))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbCollect)
                            .addComponent(jbCollect))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(jtfRaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(322, 322, 322))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbClearAlarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbClearAlarmActionPerformed
        bioPodInterface.sendMessageToPod(new IbacClearAlarm());
}//GEN-LAST:event_jbClearAlarmActionPerformed

    private void jbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStatusActionPerformed
        bioPodInterface.sendMessageToPod(new IbacStatus());
}//GEN-LAST:event_jbStatusActionPerformed

    private void jbSleepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSleepActionPerformed
        bioPodInterface.sendMessageToPod(new IbacSleep());
}//GEN-LAST:event_jbSleepActionPerformed

    private void jbAirSampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAirSampleActionPerformed
        bioPodInterface.sendMessageToPod(new IbacAirSample());
}//GEN-LAST:event_jbAirSampleActionPerformed

    private void jbSyncRtcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSyncRtcActionPerformed
        bioPodInterface.sendMessageToPod(new PodSetRtc(new Date().getTime()/1000));
}//GEN-LAST:event_jbSyncRtcActionPerformed

    private void jbCollectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCollectActionPerformed
        IbacCollect cmd = new IbacCollect();
        cmd.setOn(jcbCollect.isSelected());
        bioPodInterface.sendMessageToPod(cmd);
}//GEN-LAST:event_jbCollectActionPerformed

    private void jbAlarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlarmActionPerformed
        IbacAlarm cmd = new IbacAlarm();
        cmd.setIsAlarm(jcbAlarm.isSelected());
        bioPodInterface.sendMessageToPod(cmd);
    }//GEN-LAST:event_jbAlarmActionPerformed

    private void jbTraceRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbTraceRateActionPerformed
        IbacTraceRate cmd = new IbacTraceRate();
        int rate;

        try {
            rate = Integer.parseInt(jtfTraceRate.getText());
        } catch (Exception e) {
            insertMessageArea("Error parsing trace rate");
            return;
        }
        cmd.setTraceRate(rate);
        bioPodInterface.sendMessageToPod(cmd);
    }//GEN-LAST:event_jbTraceRateActionPerformed

    private void jbDiagRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDiagRateActionPerformed
        IbacDiagRate cmd = new IbacDiagRate();
        int rate;

        try {
            rate = Integer.parseInt(jtfDiagRate.getText());
        } catch (Exception e) {
            insertMessageArea("Error parsing diag rate");
            return;
        }
        cmd.setDiagRate(rate);
        bioPodInterface.sendMessageToPod(cmd);
    }//GEN-LAST:event_jbDiagRateActionPerformed

    private void jbAutoCollectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAutoCollectActionPerformed
        IbacAutoCollect cmd = new IbacAutoCollect();
        int rate;

        try {
            rate = Integer.parseInt(jtfAutoCollect.getText());
        } catch (Exception e) {
            insertMessageArea("Error parsing autocollect runtime interval");
            return;
        }
        cmd.setMinimumRuntime(rate);
        cmd.setOn(jcbAutoCollect.isSelected());
        bioPodInterface.sendMessageToPod(cmd);
    }//GEN-LAST:event_jbAutoCollectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new BiopodTest().setVisible(true);
            }
        });
    }

    public boolean isGetter(Method m) {
        if (!m.getName().startsWith("get") && !m.getName().startsWith("is")) {
            return false;
        }
        if (m.getParameterTypes().length != 0) {
            return false;
        }
        if (void.class.equals(m.getReturnType())) {
            return false;
        }
        return true;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgState;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAirSample;
    private javax.swing.JButton jbAlarm;
    private javax.swing.JButton jbAutoCollect;
    private javax.swing.JButton jbClearAlarm;
    private javax.swing.JButton jbCollect;
    private javax.swing.JButton jbDiagRate;
    private javax.swing.JButton jbRaw;
    private javax.swing.JButton jbSleep;
    private javax.swing.JButton jbStatus;
    private javax.swing.JButton jbSyncRtc;
    private javax.swing.JButton jbTraceRate;
    private javax.swing.JCheckBox jcbAlarm;
    private javax.swing.JCheckBox jcbAutoCollect;
    private javax.swing.JCheckBox jcbCollect;
    private javax.swing.JTable jtbDiagnostics;
    private javax.swing.JTable jtbParticleDetection;
    private javax.swing.JTextField jtfAutoCollect;
    private javax.swing.JTextField jtfDiagRate;
    private javax.swing.JTextField jtfRaw;
    private javax.swing.JTextField jtfTraceRate;
    private javax.swing.JList jtlMessages;
    // End of variables declaration//GEN-END:variables

   

    public void insertMessageArea(String message) {

        DefaultListModel model = ((DefaultListModel) jtlMessages.getModel());
        model.insertElementAt(message, 0);
        while (model.getSize() >=25) {
            model.removeElementAt(model.getSize() - 1);
        }

    }

    
    @Override
    public void handleMessage(BioPodMessage m) {
        if(m instanceof ParticleCountMessage){
            insertMessageArea("ParticleCountMessage Message received!");
            handleParticleCount((ParticleCountMessage)m);
        }
        if(m instanceof DiagnosticsMessage){
            insertMessageArea("DiagnosticsMessage Message received!");
            handleDiagnosticMessage((DiagnosticsMessage)m);
        }
        if(m instanceof PodHeartbeat){
            insertMessageArea("Heartbeat Message received!" + ((PodHeartbeat)m).getLastToken());
        }
    }

    private void handleParticleCount(ParticleCountMessage message)
    {
        ArrayList<Method> methods = new ArrayList<Method>();
        for (Method m : ParticleCountMessage.class.getMethods()) {
            methods.add(m);
        }

        Collections.sort(methods, new Comparator() {

            @Override
            public int compare(Object o1, Object o2) {
                return o1.toString().compareTo(o2.toString());
            }
        });
        ArrayList data = new ArrayList();
        for (Method m : methods) {
            if (isGetter(m)) {
                try {
                    data.add(m.invoke(message));
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(BiopodTest.class.getName()).log(Level.SEVERE, null, ex);
                    data.add(null);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(BiopodTest.class.getName()).log(Level.SEVERE, null, ex);
                    data.add(null);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(BiopodTest.class.getName()).log(Level.SEVERE, null, ex);
                    data.add(null);
                }
            }
        }
        DefaultTableModel model = ((DefaultTableModel) jtbParticleDetection.getModel());
        model.insertRow(0, data.toArray());
        model.setRowCount(25);
    }

    private void handleDiagnosticMessage(DiagnosticsMessage message)
    {
        ArrayList<Method> methods = new ArrayList<Method>();
        for (Method m : DiagnosticsMessage.class.getMethods()) {
            methods.add(m);
        }

        Collections.sort(methods, new Comparator() {

            @Override
            public int compare(Object o1, Object o2) {
                return o1.toString().compareTo(o2.toString());
            }
        });
        ArrayList data = new ArrayList();
        for (Method m : methods) {
            if (isGetter(m)) {
                try {
                    data.add(m.invoke(message));
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(BiopodTest.class.getName()).log(Level.SEVERE, null, ex);
                    data.add(null);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(BiopodTest.class.getName()).log(Level.SEVERE, null, ex);
                    data.add(null);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(BiopodTest.class.getName()).log(Level.SEVERE, null, ex);
                    data.add(null);
                }
            }
        }
        DefaultTableModel model = ((DefaultTableModel) jtbDiagnostics.getModel());
        model.insertRow(0, data.toArray());
        model.setRowCount(25);
    }
}
